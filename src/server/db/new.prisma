// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Add pgbouncer=true and connection_limit=1 url params for production db connection url
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String           @id @default(cuid())
  firstName        String?
  lastName         String?
  email            String?          @unique
  emailVerified    DateTime?
  imageSrc         String?
  role             UserRole         @default(USER)
  onboardingStatus OnboardingStatus @default(PENDING)

  accounts Account[]
  sessions Session[]
}

enum OnboardingStatus {
  APPROVED
  REJECTED
  PENDING
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GamificationAward {
  id   String @id @default(uuid())
  name String

  icon  String?
  about String?
}





model Fund {
  id   String @id @default(uuid())
  name String
  slug String @unique

  logo         String?
  headquarter  String?
  topics       String[]
  stages       String[]
  description  String?
  foundingDate DateTime?

  website       String?
  linkedIn      String?
  twitter       String?
  medium        String?
  youTube       String?
  instagram     String?
  newsletter    String?
  email         String?
  phoneNumber   String?
  pitchFormular String?

  team_members   TeamMember[]
  offices     Office[]
  generations FundGeneration[]
  news        News[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Office {
  id   String @id @default(uuid())
  name String

  thumbnail String?
  street    String?
  state     String?
  zip       String?
  city      String?
  country   String?
  latitude  Float?
  longitude Float?

  fund   Fund   @relation(fields: [fundId], references: [id])
  fundId String

  team_member TeamMember[]
}

model TeamMember {
  id String @id @default(uuid())

  firstName String
  lastName  String

  position       String?  // rename
  stage          String[]
  sector         String[] //added
  about          String?  //added
  skill          String[] //added
  university     String?  //added
  location       String?  //added
  diversity     Diversity   @default(white_male) //added

  profilePicture String?
  startingYear   String?  // renamed + type change
  vita           String?

  topics         String[]
  languages      String[]


  linkedIn String?
  medium   String?
  twitter  String?
  email    String?
  phone    String?


  board   Board[]
  funds Fund[]

  office Office @relation(fields: [officeId], references: [id])
  officeId  String
}


enum BOARD_STATUS {
    ACTIVE
    DEACTIVE
}

model Board {
    id         String @id @default(uuid())

    title      String?
    status     BOARD_STATUS         @default(ACTIVE)
    year       String?

    company    PortfolioCompany?

    teamMember TeamMember @relation(fields: [teamMemberId], references: [id])
    teamMemberId  String
}


model FundGeneration {
  id   String @id @default(uuid())
  name String
  year String // added

  description String?
  volume        String? // renamed
  publishedAt DateTime?

  fund   Fund   @relation(fields: [fundId], references: [id])
  fundId String
}

model LimitedPartner {
  id   String @id @default(uuid())
  name String

  logo         String?
  headquarter  String?
  targets      String[]
  description  String?
  foundingDate DateTime?

  website       String?
  linkedIn      String?
  twitter       String?
  medium        String?
  youTube       String?
  instagram     String?
  newsletter    String?
  email         String?
  phoneNumber   String?
  pitchFormular String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum Diversity {
    white_male
    white_female
    black_male
    black_female
}

enum DiversityCompany {
    Only_white_male_Founders
    Only_white_female_Founders
    Only_POC_male_Founders
    Only_POC_female_Founders
    Min_1_w
    Min_1_POC
    Min_1_w_POC
}

model BusinessAngel {
  id   String @id @default(uuid())
  name String
  slug String @unique

  profilePicture String?
  location       String?
  topics         String[]
  stages         String[]
  about          String?
  foundingDate   DateTime?

  website       String?
  linkedIn      String?
  twitter       String?
  medium        String?
  youTube       String?
  instagram     String?
  newsletter    String?
  email         String?
  phoneNumber   String?
  pitchFormular String?

  ticketSize    String?
  diversity     Diversity   @default(white_male)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Founder {
  id   String @id @default(uuid())
  name String
  slug String @unique

  position      String?
  serialFounder Boolean @default(false)
  desciption    String?

  linkedIn    String?
  twitter     String?
  medium      String?
  youTube     String?
  instagram   String?
  newsletter  String?
  email       String?
  phoneNumber String?

  portfolioCompanies PortfolioCompany[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PortfolioCompany {
  id   String @id @default(uuid())
  name String
  slug String @unique

  logo      String?
  about     String?
  sector    String[] //added
  InvestmentStage String? //added
  InvesetmentDate String? //added
  funding   String?
  valuation String?
  diversity DiversityCompany @default(Only_white_male_Founders)

  founders Founder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  board     Board @relation(fields: [boardId], references: [id]) //added
  boardId   String @unique
}

model News {
  id    String @id @default(uuid())
  title String

  description String?
  thumbnail   String?
  url         String?
  type        String?

  fund   Fund   @relation(fields: [fundId], references: [id])
  fundId String

  publisher   Publisher @relation(fields: [publisherId], references: [id])
  publisherId String
}

model Publisher {
  id   String @id @default(uuid())
  name String

  logo         String?
  url          String    @unique
  foundingDate DateTime?
  description  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  News      News[]
}

model Event {
  id   String @id @default(uuid())
  name String
  slug String @unique

  description String?
  organizer   String?
  headerImage String?
  pricing     String[]
  url         String?
  date        DateTime?

  street  String?
  state   String?
  zip     String?
  city    String?
  country String?

  latitude  Float?
  longitude Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
